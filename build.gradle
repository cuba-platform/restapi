/*
 * Copyright (c) 2008-2019 Haulmont.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

buildscript {
    ext.cubaVersion = '7.1-SNAPSHOT'
    repositories {
        mavenLocal()
        jcenter()

        /*
         * maven { url "https://dl.bintray.com/cuba-platform/main" }
         *
         * TODO: temprorary - use Bintray later
         */
        maven {
            url 'https://repo.cuba-platform.com/content/groups/work'
            credentials {
                username 'cuba'
                password 'cuba123'
            }
        }
    }
    dependencies {
        classpath "com.haulmont.gradle:cuba-plugin:$cubaVersion"
        classpath "com.haulmont.gradle:addon-gradle-plugin:1.0.3"
    }
}

def modulePrefix = 'restapi'

def globalModule = project(":${modulePrefix}-global")
def coreModule = project(":${modulePrefix}-core")
def webModule = project(":${modulePrefix}-web")
def restApiModule = project(":${modulePrefix}-rest-api")
def portalModule = project(":${modulePrefix}-portal")

def servletApi = 'javax.servlet:javax.servlet-api:3.1.0'

apply(plugin: 'cuba')
apply(plugin: 'addon-gradle-plugin')

cuba {
    artifact {
        group = 'com.haulmont.addon.restapi'
        version = '0.1'
        isSnapshot = true
    }
    tomcat {
        dir = "$project.rootDir/deploy/tomcat"
    }
    ide {
        vcs = 'Git'
        copyright = '''Copyright (c) 2008-$today.year Haulmont.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.'''
    }
}

dependencies {
    appComponent("com.haulmont.cuba:cuba-global:$cubaVersion")
}

def hsql = 'org.hsqldb:hsqldb:2.2.9'

configure([globalModule, coreModule, webModule, restApiModule, portalModule]) {
    apply(plugin: 'java')
    apply(plugin: 'maven')
    apply(plugin: 'cuba')
    apply(plugin: 'addon-gradle-plugin')

    dependencies {
        testCompile('junit:junit:4.12')
        testCompile('org.jmockit:jmockit:1.39')
    }

    task sourceJar(type: Jar) {
        from file('src')
        classifier = 'sources'
    }

    artifacts {
        archives sourceJar
    }
}

configure(globalModule) {
    jar {
        manifest {
            attributes('App-Component-Id': cuba.artifact.group)
            attributes('App-Component-Version': cuba.artifact.version + (cuba.artifact.isSnapshot ? '-SNAPSHOT' : ''))
        }
    }
}

configure(coreModule) {
    configurations {
        jdbc
        dbscripts
    }

    dependencies {
        compile(globalModule)
        compileOnly(servletApi)
        jdbc(hsql)
        testRuntime(hsql)
    }

    task cleanConf(description: 'Cleans up conf directory') {
        doLast {
            def dir = new File(cuba.tomcat.dir, "/conf/${modulePrefix}-core")
            if (dir.isDirectory()) {
                ant.delete(includeemptydirs: true) {
                    fileset(dir: dir, includes: '**/*', excludes: 'local.app.properties')
                }
            }
        }
    }

    task deploy(dependsOn: [assemble, cleanConf], type: CubaDeployment) {
        appName = "${modulePrefix}-core"
        appJars(modulePrefix + '-global', modulePrefix + '-core')
    }

    task createDb(dependsOn: assembleDbScripts, description: 'Creates local database', type: CubaDbCreation) {
        dbms = 'hsql'
        host = 'localhost'
        dbName = 'restapi'
        dbUser = 'sa'
        dbPassword = ''
    }

    task updateDb(dependsOn: assembleDbScripts, description: 'Updates local database', type: CubaDbUpdate) {
        dbms = 'hsql'
        host = 'localhost'
        dbName = 'restapi'
        dbUser = 'sa'
        dbPassword = ''
    }
}

configure(webModule) {
    configurations {
        webcontent
    }

    dependencies {
        compile(restApiModule)
        compileOnly(servletApi)
    }

    task webArchive(type: Zip) {
        from file("$buildDir/web")
        from file('web')
        classifier = 'web'
    }

    artifacts {
        archives webArchive
    }

    task deployConf(type: Copy) {
        from file('src')
        include "com/haulmont/addon/restapi/**"
        into "$cuba.tomcat.dir/conf/${modulePrefix}"
    }

    task clearMessagesCache(type: CubaClearMessagesCache) {
        appName = "${modulePrefix}"
    }
    deployConf.dependsOn clearMessagesCache

    task cleanConf(description: 'Cleans up conf directory') {
        doLast {
            def dir = new File(cuba.tomcat.dir, "/conf/${modulePrefix}")
            if (dir.isDirectory()) {
                ant.delete(includeemptydirs: true) {
                    fileset(dir: dir, includes: '**/*', excludes: 'local.app.properties')
                }
            }
        }
    }

    task deploy(dependsOn: [assemble, cleanConf], type: CubaDeployment) {
        appName = "${modulePrefix}"
        appJars(modulePrefix + '-global', modulePrefix + '-web', modulePrefix + '-rest-api')
    }
}

configure(portalModule) {
    dependencies {
        compile(restApiModule)
        compileOnly(servletApi)
    }

    def webappName = "${modulePrefix}-portal"

    task deploy(dependsOn: assemble, type: CubaDeployment) {
        appName = webappName
        appJars(modulePrefix + '-global', modulePrefix + '-portal', modulePrefix + '-rest-api')
    }

    task webArchive(type: Zip) {
        from file('web')
        from file("$buildDir/web")
        exclude '**/web.xml', '**/app.properties'
        classifier = 'web'
    }

    artifacts {
        archives webArchive
    }
}

configure(restApiModule) {
    sourceSets {
        main {
            java {
                srcDirs = ['src']
            }
        }
        test {
            java {
                srcDirs = ['test']
            }
        }
    }

    dependencies {
        compile(globalModule)

        compile("com.haulmont.cuba:cuba-client-tests:$cubaVersion")

        compile('org.jmockit:jmockit:1.39')
        // required for Spring multipart resolver
        compile('commons-fileupload:commons-fileupload:1.3.3')

        compile('org.springframework.security:spring-security-core:5.1.1.RELEASE')
        compile('org.springframework.security:spring-security-web:5.1.1.RELEASE')
        compile('org.springframework.security:spring-security-config:5.1.1.RELEASE')
        compile('org.springframework.security.oauth:spring-security-oauth2:2.3.4.RELEASE')
        compile('org.springframework:spring-webmvc:5.1.2.RELEASE')
        compile('org.springframework:spring-context-support:5.1.2.RELEASE')
        compile('org.springframework.ldap:spring-ldap-core:2.3.2.RELEASE') {
            // removed because it defines its own Log4j LogFactory via JDK services mechanism
            exclude(group: 'org.slf4j', module: 'jcl-over-slf4j')
        }

        compile('org.json:json:20180130')

        compile('com.fasterxml.jackson.core:jackson-databind:2.9.8')
        compile('com.fasterxml.jackson.core:jackson-annotations:2.9.8')
        compile('com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.9.8')

        compile('io.swagger:swagger-models:1.5.21')
        compileOnly(servletApi)
    }
}

task undeploy(type: Delete, dependsOn: ":${modulePrefix}-web:cleanConf") {
    delete("$cuba.tomcat.dir/shared")
    delete("$cuba.tomcat.dir/webapps/${modulePrefix}-core")
    delete("$cuba.tomcat.dir/webapps/${modulePrefix}")
    delete("$cuba.tomcat.dir/webapps/${modulePrefix}-portal")
}

task restart(dependsOn: ['stop', ":${modulePrefix}-core:deploy", ":${modulePrefix}-web:deploy", ":${modulePrefix}-portal:deploy"], description: 'Redeploys applications and restarts local Tomcat') {
    doLast {
        ant.waitfor(maxwait: 6, maxwaitunit: 'second', checkevery: 2, checkeveryunit: 'second') {
            not {
                socket(server: 'localhost', port: '8787')
            }
        }
        start.execute()
    }
}
