buildscript {
    ext.cubaVersion = '7.2-SNAPSHOT'
    repositories {
        mavenLocal()
        if (System.getenv('HAULMONT_REPOSITORY_URL')) {
            maven {
                credentials {
                    username System.getenv('HAULMONT_REPOSITORY_USER')
                    password System.getenv('HAULMONT_REPOSITORY_PASSWORD')
                }
                url System.getenv('HAULMONT_REPOSITORY_URL')
            }
        }
        jcenter()

        /*maven { url "https://dl.bintray.com/cuba-platform/main" }*/

        maven {
            url 'https://repo.cuba-platform.com/content/groups/work'
            credentials {
                username(rootProject.hasProperty('repoUser') ? rootProject['repoUser'] : 'cuba')
                password(rootProject.hasProperty('repoPass') ? rootProject['repoPass'] : 'cuba123')
            }
        }
    }
    dependencies {
        classpath "com.haulmont.gradle:cuba-plugin:$cubaVersion"
        classpath "com.haulmont.gradle:addon-gradle-plugin:1.1.2"
    }
}

def modulePrefix = 'app'

def globalModule = project(":${modulePrefix}-global")
def coreModule = project(":${modulePrefix}-core")
def webModule = project(":${modulePrefix}-web")
def portalModule = project(":${modulePrefix}-portal")

def servletApi = 'javax.servlet:javax.servlet-api:3.1.0'

apply(plugin: 'cuba')
apply(plugin: 'addon-gradle-plugin')

cuba {
    artifact {
        group = 'com.haulmont.rest.demo'
        version = '0.1'
        isSnapshot = true
    }
    tomcat {
        dir = "$project.rootDir/deploy/tomcat"
    }
}

dependencies {
    appComponent("com.haulmont.cuba:cuba-global:$cubaVersion")
    appComponent("com.haulmont.bpm:bpm-global:$cubaVersion")
    appComponent("com.haulmont.reports:reports-global:$cubaVersion")
    appComponent("com.haulmont.addon.restapi:restapi-global:$cubaVersion")
}

def hsql = 'org.hsqldb:hsqldb:2.4.1'

configure([globalModule, coreModule, webModule, portalModule]) {
    apply(plugin: 'java')
    apply(plugin: 'groovy')
    apply(plugin: 'maven')
    apply(plugin: 'cuba')
    apply(plugin: 'addon-gradle-plugin')

    dependencies {
        testCompile('org.jmockit:jmockit:1.39')
        testCompile('junit:junit:4.12')
        testCompile('org.spockframework:spock-core:1.2-groovy-2.5')

        // New http client needed for running selenium tests
        testCompile('org.apache.httpcomponents:httpcore:4.4.10') {
            exclude(group: 'org.codehaus.groovy', module: 'groovy-all')
        }
    }

    sourceSets {
        test {
            groovy {
                include 'spec/**'
                srcDir 'test'
            }
            java {
                srcDir 'test'
            }
        }
    }

    task sourceJar(type: Jar) {
        from file('src')
        classifier = 'sources'
    }

    artifacts {
        archives sourceJar
    }
}

configure(globalModule) {
    entitiesEnhancing {
        main {
            enabled = true
        }
    }
}

configure(coreModule) {

    configurations {
        jdbc
        dbscripts
    }

    dependencies {
        compile(globalModule)
        compileOnly(servletApi)
        jdbc(hsql)
        testRuntime(hsql)

        testCompile("httpunit:httpunit:1.7")
        testCompile("rhino:js:1.7R2")

        compile('org.apache.directory.server:apacheds-protocol-ldap:2.0.0.AM25')
        compile('org.apache.directory.server:apacheds-core-annotations:2.0.0.AM25')
        compile('org.apache.directory.server:apacheds-ldif-partition:2.0.0.AM25')
        compile('org.apache.directory.api:api-ldap-codec-standalone:2.0.0.AM2')
    }

    task cleanConf(description: 'Cleans up conf directory') {
        doLast {
            def dir = new File(cuba.tomcat.dir, "/conf/${modulePrefix}-core")
            if (dir.isDirectory()) {
                ant.delete(includeemptydirs: true) {
                    fileset(dir: dir, includes: '**/*', excludes: 'local.app.properties')
                }
            }
        }
    }

    task deploy(dependsOn: [assemble, cleanConf], type: CubaDeployment) {
        appName = "${modulePrefix}-core"
        appJars(modulePrefix + '-global', modulePrefix + '-core')
    }

    task startDb(description: 'Starts local HSQLDB server', type: CubaHsqlStart) {
        dbPort = 9010
        dbName = 'rest_demo'
        showUi = true
    }

    task createDb(dependsOn: assembleDbScripts, description: 'Creates local database', type: CubaDbCreation) {
        dbms = 'hsql'
        host = 'localhost:9010'
        dbName = 'rest_demo'
        dbUser = 'sa'
        dbPassword = ''
    }

    task updateDb(dependsOn: assembleDbScripts, description: 'Updates local database', type: CubaDbUpdate) {
        dbms = 'hsql'
        host = 'localhost:9010'
        dbName = 'rest_demo'
        dbUser = 'sa'
        dbPassword = ''
    }
}

configure(webModule) {
    configurations {
        webcontent
    }

    dependencies {
        compileOnly(servletApi)
        compile(globalModule)

        testCompile('com.jayway.jsonpath:json-path:2.4.0')
        testCompile('com.haulmont.masquerade:masquerade-connector:1.0.7')
        testCompile('com.haulmont.masquerade:masquerade-web:1.0.7')

        testCompile('junit:junit:4.12')
    }

    task webArchive(type: Zip) {
        from file("$buildDir/web")
        from file('web')
        classifier = 'web'
    }

    artifacts {
        archives webArchive
    }

    task deployConf(type: Copy) {
        from file('src')
        include "com/haulmont/rest/demo/**"
        into "$cuba.tomcat.dir/conf/${modulePrefix}"
    }

    task clearMessagesCache(type: CubaClearMessagesCache) {
        appName = "${modulePrefix}"
    }
    deployConf.dependsOn clearMessagesCache

    task cleanConf(description: 'Cleans up conf directory') {
        doLast {
            def dir = new File(cuba.tomcat.dir, "/conf/${modulePrefix}")
            if (dir.isDirectory()) {
                ant.delete(includeemptydirs: true) {
                    fileset(dir: dir, includes: '**/*', excludes: 'local.app.properties')
                }
            }
        }
    }

    task deploy(dependsOn: [assemble, cleanConf], type: CubaDeployment) {
        appName = "${modulePrefix}"
        appJars(modulePrefix + '-global', modulePrefix + '-web')
    }

    task testPortalStart(type: Test, dependsOn: testClasses) {
        include("**/DeploymentPortalTest.class")
        systemProperties = System.getProperties()
    }

    task testWebStart(type: Test, dependsOn: testClasses) {
        include("**/DeploymentWebTest.class")
        systemProperties = System.getProperties()
    }
}

configure(portalModule) {
    dependencies {
        compileOnly(servletApi)
        compile(globalModule)

        testCompile('com.haulmont.masquerade:masquerade-connector:1.0.7')
        testCompile('com.jayway.jsonpath:json-path:2.4.0')
        testCompile('org.apache.httpcomponents:fluent-hc:4.5.2')
        testCompile('org.apache.httpcomponents:httpmime:4.5.2')
        testCompile('io.rest-assured:rest-assured:3.0.7')
        testCompile('com.squareup.retrofit2:converter-scalars:2.4.0')

        testCompile('org.postgresql:postgresql:42.2.4')
        testCompile('org.hsqldb:hsqldb:2.4.1')

        testCompile("httpunit:httpunit:1.7")
        testCompile("rhino:js:1.7R2")
    }

    afterEvaluate {
        test {
            jvmArgs "-javaagent:${classpath.find { it.name.contains("jmockit") }.absolutePath}"
        }
    }

    def webappName = "${modulePrefix}-portal"
    def resourcesDir = "$cuba.tomcat.dir/webapps/$webappName/resources"
    def ftlDir = "$cuba.tomcat.dir/webapps/$webappName/WEB-INF/templates"

    task deploy(dependsOn: assemble, type: CubaDeployment) {
        appName = webappName
        appJars(modulePrefix + '-global', modulePrefix + '-portal')
    }

    task deployStatic() {
        doLast {
            copy {
                from file('web/resources')
                include '**/*.css'
                include '**/*.js'
                include '**/*.png'
                include '**/*.gif'
                include '**/*.jpg'
                into resourcesDir
            }
            copy {
                from file('web/WEB-INF/templates')
                include '**/*.ftl'
                into ftlDir
            }
        }
    }

    task cleanStatic() {
        doLast {
            delete resourcesDir
            delete ftlDir
        }
    }

    task webArchive(type: Zip) {
        from file('web')
        from file("$buildDir/web")
        exclude '**/web.xml', '**/app.properties'
        classifier = 'web'
    }

    task funcTest(dependsOn: ':prepareTest', description: 'Run functional tests', type: Test) {
        scanForTestClasses = false
        includes = ['**/*FT.class']
        workingDir = "$projectDir/../../"
    }

    artifacts {
        archives webArchive
    }
}

task undeploy(type: Delete, dependsOn: ":${modulePrefix}-web:cleanConf") {
    delete("$cuba.tomcat.dir/shared")
    delete("$cuba.tomcat.dir/webapps/${modulePrefix}-core")
    delete("$cuba.tomcat.dir/webapps/${modulePrefix}")
    delete("$cuba.tomcat.dir/webapps/${modulePrefix}-portal")
}

task restart(dependsOn: ['stop', ":${modulePrefix}-core:deploy", ":${modulePrefix}-web:deploy", ":${modulePrefix}-portal:deploy"], description: 'Redeploys applications and restarts local Tomcat') {
    doLast {
        ant.waitfor(maxwait: 6, maxwaitunit: 'second', checkevery: 2, checkeveryunit: 'second') {
            not {
                socket(server: 'localhost', port: '8787')
            }
        }
        start.execute()
    }
}

/* ============= REST API testing =============== */

task clearConf(description: 'Clears conf directory') {
    doLast {
        def dir = new File(cuba.tomcat.dir, '/conf/app')
        if (dir.isDirectory()) {
            ant.delete(includeemptydirs: true) {
                fileset(dir: dir, includes: '**/*', excludes: 'local.app.properties')
            }
        }
    }
}

task enableRemoteJmx() {
    doLast {
        project.file("${cuba.tomcat.dir}/bin/setenv.bat").text = '''
set CATALINA_OPTS=-Xmx512m -Dfile.encoding=UTF-8

set CATALINA_OPTS=%CATALINA_OPTS% -Dlogback.configurationFile=../conf/logback.xml

set CATALINA_OPTS=%CATALINA_OPTS% -Dcom.sun.management.jmxremote 
set CATALINA_OPTS=%CATALINA_OPTS% -Djava.rmi.server.hostname=localhost 
set CATALINA_OPTS=%CATALINA_OPTS% -Dcom.sun.management.jmxremote.port=7777 
set CATALINA_OPTS=%CATALINA_OPTS% -Dcom.sun.management.jmxremote.ssl=false 
set CATALINA_OPTS=%CATALINA_OPTS% -Dcom.sun.management.jmxremote.authenticate=false

set JPDA_OPTS=-Xrunjdwp:transport=dt_socket,address=8787,server=y,suspend=n
'''

        project.file("${cuba.tomcat.dir}/bin/setenv.sh").text = '''
CATALINA_OPTS="-Xmx512m -Dfile.encoding=UTF-8"

CATALINA_OPTS="$CATALINA_OPTS -Dlogback.configurationFile=../conf/logback.xml"

CATALINA_OPTS="$CATALINA_OPTS -Dcom.sun.management.jmxremote"

CATALINA_OPTS="$CATALINA_OPTS \\
-Djava.rmi.server.hostname=localhost \\
-Dcom.sun.management.jmxremote.port=7777 \\
-Dcom.sun.management.jmxremote.ssl=false \\
-Dcom.sun.management.jmxremote.authenticate=false"

JPDA_OPTS="-Xrunjdwp:transport=dt_socket,address=8787,server=y,suspend=n"
'''
    }
}

task enableTestProperties() {
    doLast {
        project.file("${cuba.tomcat.dir}/conf/app-core/").mkdirs()
        project.file("${cuba.tomcat.dir}/conf/app-core/local.app.properties").text = '''
refapp.core.embeddedLdap.startTcpServer = true
'''
        project.file("${cuba.tomcat.dir}/conf/app-portal/").mkdirs()
        project.file("${cuba.tomcat.dir}/conf/app-portal/local.app.properties").text = '''
cuba.rest.ldap.enabled = true
cuba.rest.ldap.urls = ldap://localhost:10389
cuba.rest.ldap.base = dc=example,dc=com
cuba.rest.ldap.user = cn=refapp,dc=example,dc=com
cuba.rest.ldap.password = refapp
cuba.rest.ldap.userLoginField = cn
'''
    }
}

task configureTest(dependsOn: [enableTestProperties, enableRemoteJmx])

task deployTest(dependsOn: [coreModule.deploy, webModule.deploy, portalModule.deploy])

task prepareTest(dependsOn: [dropTomcat, setupTomcat,
                             coreModule.createDb, configureTest,
                             deployTest, start],
        description: 'Prepare server for tests') {
    doLast {
        ant.waitfor(maxwait: 30, maxwaitunit: 'second', checkevery: 2, checkeveryunit: 'second') {
            http(url: "http://localhost:8080/app")
        }
    }
}

configureTest.mustRunAfter setupTomcat
deployTest.mustRunAfter setupTomcat
start.mustRunAfter configureTest

/* ============= Deployment Testing =============== */

task buildWar(type: CubaWarBuilding) {
    appHome = '${catalina.base}/work/app_home'
    singleWar = false
    includeJdbcDriver = true
    includeContextXml = true
}

task buildSingleWar(type: CubaWarBuilding) {
    appHome = '${catalina.base}/work/app_home'
    webXml = "${project(':app-web').projectDir}/web/WEB-INF/single-app-web.xml"
    coreContextXmlPath = 'modules/core/web/META-INF/single-war-context.xml'
    includeJdbcDriver = true
    includeContextXml = true
}

task buildUberJar(type: CubaUberJarBuilding) {
    coreJettyEnvPath = 'modules/core/web/META-INF/jetty-env.xml'
    appProperties = ['cuba.automaticDatabaseUpdate': true]
    appName = 'app'
    logbackConfigurationFile = "test-deployment/logback.xml"
}

task buildSingleUberJar(type: CubaUberJarBuilding) {
    coreJettyEnvPath = 'modules/core/web/META-INF/jetty-env.xml'
    appProperties = ['cuba.automaticDatabaseUpdate': true]
    singleJar = true
    logbackConfigurationFile = "test-deployment/logback.xml"
}

task copyWarToTomcat(type: Copy) {
    from "${project.buildDir}/distributions/war"
    include "*.war"
    into "${cuba.tomcat.dir}/webapps"
}
