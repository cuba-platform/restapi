<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright (c) 2008-2019 Haulmont.
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~     http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:oauth2="http://www.springframework.org/schema/security/oauth2"
       xmlns:security="http://www.springframework.org/schema/security">

    <bean class="com.haulmont.cuba.core.sys.CubaPropertyPlaceholderConfigurer"/>

    <context:annotation-config/>
    <context:component-scan base-package="com.haulmont.addon.restapi.api"/>

    <!-- Override web implementation bean in main context -->
    <bean id="cuba_Events" class="com.haulmont.cuba.core.sys.EventsImpl"/>

    <bean id="contentNegotiationManager"
          class="org.springframework.web.accept.ContentNegotiationManagerFactoryBean">
        <property name="defaultContentType" value="application/json"/>
    </bean>

    <mvc:annotation-driven content-negotiation-manager="contentNegotiationManager"/>

    <mvc:interceptors>
        <mvc:interceptor>
            <mvc:mapping path="/**"/>
            <bean class="com.haulmont.addon.restapi.api.sys.RestCleanupInterceptor"/>
        </mvc:interceptor>
    </mvc:interceptors>

    <!-- According to the spec the token endpoint should be secured by the basic authentication -->
    <security:http pattern="/rest/v2/oauth/**"
                   create-session="stateless"
                   authentication-manager-ref="clientAuthenticationManager"
                   xmlns="http://www.springframework.org/schema/security">
        <intercept-url pattern="/**" access="isAuthenticated()"/>
        <http-basic entry-point-ref="clientAuthenticationEntryPoint"/>
        <csrf disabled="true"/>
        <cors configuration-source-ref="cuba_RestCorsSource"/>
    </security:http>

    <bean id="clientAuthenticationEntryPoint"
          class="org.springframework.security.oauth2.provider.error.OAuth2AuthenticationEntryPoint"/>

    <!-- Authentication manager that is used by token endpoint. Checks client credentials in http header -->
    <security:authentication-manager id="clientAuthenticationManager">
        <security:authentication-provider user-service-ref="clientDetailsUserDetailsService"/>
    </security:authentication-manager>

    <bean id="clientDetailsUserDetailsService"
          class="org.springframework.security.oauth2.provider.client.ClientDetailsUserDetailsService">
        <constructor-arg ref="clientDetailsService"/>
    </bean>

    <!-- The predefined list of API clients. External apps must provide this credentials in Authentication header when
    accessing the auth token -->
    <oauth2:client-details-service id="clientDetailsService">
        <oauth2:client client-id="${cuba.rest.client.id}"
                       secret="${cuba.rest.client.secret}"
                       access-token-validity="${cuba.rest.client.tokenExpirationTimeSec}"
                       refresh-token-validity="${cuba.rest.client.refreshTokenExpirationTimeSec}"
                       authorized-grant-types="${cuba.rest.client.authorizedGrantTypes}"
                       scope="rest-api"/>
    </oauth2:client-details-service>

    <bean id="oauthAuthorizationRequestManager"
          class="org.springframework.security.oauth2.provider.request.DefaultOAuth2RequestFactory">
        <constructor-arg name="clientDetailsService" ref="clientDetailsService"/>
    </bean>

    <!-- Specifies token endpoint.-->
    <oauth2:authorization-server token-endpoint-url="/v2/oauth/token"
                                 authorization-request-manager-ref="oauthAuthorizationRequestManager"
                                 client-details-service-ref="clientDetailsService"
                                 token-services-ref="tokenServices">
        <oauth2:refresh-token/>
        <oauth2:password authentication-manager-ref="userAuthenticationManager"/>
    </oauth2:authorization-server>

    <security:authentication-manager id="userAuthenticationManager">
        <security:authentication-provider ref="userAuthenticationProvider"/>
    </security:authentication-manager>

    <bean id="userAuthenticationProvider" class="com.haulmont.addon.restapi.api.auth.CubaUserAuthenticationProvider"/>

    <bean id="tokenEnhancer" class="com.haulmont.addon.restapi.api.auth.CubaTokenEnhancer"/>

    <bean id="tokenServices" class="org.springframework.security.oauth2.provider.token.DefaultTokenServices">
        <property name="supportRefreshToken" value="${cuba.rest.supportRefreshToken}"/>
        <property name="reuseRefreshToken" value="${cuba.rest.reuseRefreshToken}"/>
        <property name="tokenStore" ref="tokenStore"/>
        <property name="clientDetailsService" ref="clientDetailsService"/>
        <property name="tokenEnhancer" ref="tokenEnhancer"/>
    </bean>

    <bean id="tokenStore" class="com.haulmont.addon.restapi.api.auth.ClientProxyTokenStore">
        <property name="authenticationKeyGenerator">
            <bean class="com.haulmont.addon.restapi.api.auth.UniqueAuthenticationKeyGenerator"/>
        </property>
    </bean>

    <bean id="cuba_ExternalOAuthTokenGranter" class="com.haulmont.addon.restapi.api.auth.ExternalOAuthTokenGranter">
        <constructor-arg name="tokenServices" ref="tokenServices"/>
        <constructor-arg name="clientDetailsService" ref="clientDetailsService"/>
        <constructor-arg name="requestFactory" ref="oauthAuthorizationRequestManager"/>
    </bean>

    <!-- Required for HTTP request access from ClientProxyTokenStore
         in case it is called from OAuth2AuthenticationProcessingFilter -->
    <bean id="requestContextFilter" class="org.springframework.web.filter.RequestContextFilter"/>

    <oauth2:resource-server id="resourceFilter" token-services-ref="tokenServices"/>

    <!-- Documentation endpoint should be allowed for anyone and support cross-domain requests -->
    <security:http pattern="/rest/v2/docs/**"
                   create-session="stateless"
                   entry-point-ref="oauthAuthenticationEntryPoint"
                   xmlns="http://www.springframework.org/schema/security">
        <csrf disabled="true"/>
        <cors configuration-source-ref="cuba_RestCorsSource"/>
    </security:http>

    <!-- LDAP auth -->
    <security:http pattern="/rest/v2/ldap/**"
                   create-session="stateless"
                   authentication-manager-ref="clientAuthenticationManager"
                   xmlns="http://www.springframework.org/schema/security">
        <intercept-url pattern="/**" access="isAuthenticated()"/>
        <http-basic entry-point-ref="clientAuthenticationEntryPoint"/>
        <csrf disabled="true"/>
        <cors configuration-source-ref="cuba_RestCorsSource"/>
    </security:http>

    <!-- API controllers endpoints -->
    <security:http request-matcher-ref="restApiRequestMatcher"
                   create-session="stateless"
                   entry-point-ref="oauthAuthenticationEntryPoint"
                   xmlns="http://www.springframework.org/schema/security">
        <intercept-url pattern="/rest/v2/entities/**" access="isAuthenticated()"/>
        <intercept-url pattern="/rest/v2/queries/**" access="isAuthenticated()"/>
        <intercept-url pattern="/rest/v2/services/**" access="isAuthenticated()"/>
        <intercept-url pattern="/rest/v2/permissions" access="isAuthenticated()"/>
        <intercept-url pattern="/rest/v2/roles" access="isAuthenticated()"/>
        <intercept-url pattern="/rest/v2/metadata/**" access="isAuthenticated()"/>
        <intercept-url pattern="/rest/v2/userInfo" access="isAuthenticated()"/>
        <intercept-url pattern="/rest/v2/files/**" access="isAuthenticated()"/>
        <intercept-url pattern="/rest/v2/messages/**" access="isAuthenticated()"/>
        <anonymous enabled="false"/>
        <csrf disabled="true"/>
        <cors configuration-source-ref="cuba_RestCorsSource"/>

        <custom-filter ref="firstRestEndpointFilter" before="FIRST"/>
        <custom-filter ref="resourceFilter" before="PRE_AUTH_FILTER"/>
        <custom-filter ref="cuba_AnonymousAuthenticationFilter" after="PRE_AUTH_FILTER"/>
        <custom-filter ref="cuba_RestLastSecurityFilter" position="LAST"/>
    </security:http>

    <bean id="restApiRequestMatcher"
          class="com.haulmont.addon.restapi.api.sys.CubaRestRequestMatcher"/>

    <bean id="firstRestEndpointFilter" class="org.springframework.web.filter.CompositeFilter">
        <property name="filters">
            <list>
                <ref bean="cuba_RestExceptionLoggingFilter"/>
                <ref bean="requestContextFilter"/>
            </list>
        </property>
    </bean>

    <bean id="cuba_RestExceptionLoggingFilter" class="com.haulmont.addon.restapi.api.sys.RestExceptionLoggingFilter"/>

    <bean id="cuba_AnonymousAuthenticationFilter" class="com.haulmont.addon.restapi.api.auth.CubaAnonymousAuthenticationFilter"/>

    <bean id="cuba_RestLastSecurityFilter" class="com.haulmont.addon.restapi.api.auth.CubaRestLastSecurityFilter"/>

    <bean id="oauthAuthenticationEntryPoint"
          class="org.springframework.security.oauth2.provider.error.OAuth2AuthenticationEntryPoint">
        <property name="realmName" value="rest-api"/>
    </bean>

    <!-- The configuration defines a filter that handles CORS request first -->
    <bean id="cuba_RestCorsSource"
          class="org.springframework.web.cors.UrlBasedCorsConfigurationSource">
        <property name="corsConfigurations">
            <map>
                <entry key="/**" value-ref="cuba_RestCorsConfig"/>
            </map>
        </property>
    </bean>

    <bean id="cuba_RestCorsConfig" class="org.springframework.web.cors.CorsConfiguration">
        <property name="allowedOrigins" value="${cuba.rest.allowedOrigins}"/>
        <property name="allowedHeaders" value="*"/>
        <property name="allowedMethods" value="*"/>
        <property name="allowCredentials" value="true"/>
        <property name="exposedHeaders">
            <list>
                <value>X-Total-Count</value>
                <value>Content-Disposition</value>
            </list>
        </property>
    </bean>

    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <property name="maxUploadSize" value="${cuba.rest.maxUploadSize}"/>
    </bean>
</beans>